image: rust
variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/binaries/${CI_COMMIT_TAG}/"
  WINDOWS_AMD64_BINARY: automattermostatus-windows-amd64.exe
  LINUX_AMD64_BINARY: automattermostatus-linux-amd64
  MACOS_AMD64_BINARY: automattermostatus-macos-amd64


stages:
  - build
  - test
  - release

.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809

.macos_buildcloud_runners:
  tags:
    - shared-macos-amd64
  image: macos-11-xcode-12

cache:
  key: $CI_COMMIT_REF_NAME-$CI_JOB_NAME
  paths:
    - target
    - .cargo

style:
  stage: build
  script:
    - rustup component add clippy rustfmt
    - rustc --version
    - cargo version
    - cargo fmt -- --check
    - cargo clippy

.build-windows: # done on github for now
  variables:
    RUSTFLAGS: "-D warnings" # Disallow warnings
  stage: build
  extends: .shared_windows_runners
  rules:  # We don't build for daily CI as it is too long and is cargo checked on github actions anyway
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+.*$/
  before_script:
    - choco feature enable -n=allowGlobalConfirmation
    - choco install rust gcc
  script:
    - cargo test
    - cargo build --release 
  artifacts:
    paths:
      - target/release/automattermostatus.exe
    expire_in: 7 day


build-linux:
  stage: build
  variables:
    RUSTFLAGS: "-D warnings" # Disallow warnings
  script:
    - cargo build --release 
  artifacts:
    paths:
      - target/release/automattermostatus
    expire_in: 7 day

test-linux:
  stage: build
  before_script:
    - if [ ! -x .cargo/bin/cargo2junit ] then cargo install cargo2junit; fi
  script:
    - cargo test -- -Z unstable-options --format json --report-time | .cargo/bin/cargo2junit > tests.xml
  artifacts:
    paths:
      - tests.xml
    when: always
    reports:
      junit: tests.xml

test-linux-beta:
  image: instrumentisto/rust:beta
  stage: build
  before_script:
    - if [ ! -x .cargo/bin/cargo2junit ] then cargo install cargo2junit; fi
  script:
    - cargo test -- -Z unstable-options --format json --report-time | .cargo/bin/cargo2junit > tests.xml
  artifacts:
    paths:
      - tests.xml
    expire_in: 7 day
    when: always
    reports:
      junit: tests.xml

.test-linux-nightly:
  stage: build
  before_script:
    - if [ ! -x .cargo/bin/cargo2junit ] then cargo install cargo2junit; fi
  script:
    - cargo +nightly test -- -Z unstable-options --format json --report-time | .cargo/bin/cargo2junit > tests.xml
  artifacts:
    paths:
      - tests.xml
    expire_in: 7 day
    when: always
    reports:
      junit: tests.xml

# Not enabled for now
.build-mac:
    stage: build
    extends: .macos_buildcloud_runners
    before_script:
      - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
      - rustup install stable
    script:
        - cargo build --release 
        - cargo test
    artifacts:
      paths:
        - target/release/automattermostatus.exe


.upload: # done on github for now
  stage: release
  needs: [build-linux, build-windows]
  dependencies: [build-linux, build-windows]
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+.*$/
  script:
    - env
    - echo "$PACKAGE_REGISTRY_URL"
    - cp target/release/automattermostatus ${LINUX_AMD64_BINARY}
    - cp target/release/automattermostatus.exe ${WINDOWS_AMD64_BINARY}
    - 'curl --fail-with-body --user gitlab-uplaod:$GITLAB_PACKAGE_TOKEN --upload-file ${WINDOWS_AMD64_BINARY} ${PACKAGE_REGISTRY_URL}/${WINDOWS_AMD64_BINARY}'
    - 'curl --fail-with-body --user gitlab-uplaod:$GITLAB_PACKAGE_TOKENCI_JOB_TOKEN --upload-file ${LINUX_AMD64_BINARY} ${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}'


## TODO : use gitlab package API to wait for  all binaries to be
# uploaded.
#.wait-upload:
#  image: curlimages/curl:latest
#  script: ci/wait-until curl -fIsS

release:
  stage: release
    #needs: [upload]
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+.*$/
  script:
    - sed -ne '/^# '${CI_COMMIT_TAG}' .*$/,/^# v[0-9]\+\.[0-9]\+\.[0-9]/p' CHANGELOG.md | head -n-2 > description.txt
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: './description.txt'
    tag_name: '$CI_COMMIT_TAG'                                       # elsewhere in the pipeline.
    ref: '$CI_COMMIT_TAG'
    assets: # Optional, multiple asset links
      links:
        - name: "Linux build : ${LINUX_AMD64_BINARY}"
          url: ${PACKAGE_REGISTRY_URL}/linux/${LINUX_AMD64_BINARY}
        - name: "Windows build : ${WINDOWS_AMD64_BINARY}"
          url: ${PACKAGE_REGISTRY_URL}/windows${WINDOWS_AMD64_BINARY}
        - name: 'MacOS build : ${MACOS_AMD64_BINARY}'
          url: ${PACKAGE_REGISTRY_URL}/windows${MACOS_AMD64_BINARY}

